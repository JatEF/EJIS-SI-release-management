@Article{	  AdamsBellomo_et_al2015,
  author	= {B. Adams and S. Bellomo and C. Bird and T. Marshall-Keim
		  and F. Khomh and K. Moir},
  journal	= {IEEE Software},
  title		= {The Practice and Future of Release Engineering: A
		  Roundtable with Three Release Engineers},
  year		= {2015},
  volume	= {32},
  number	= {2},
  pages		= {42-49},
  abstract	= {Three release engineers share their perspectives on
		  quality metrics for releases and on continuous delivery's
		  benefits and limitations. They also discuss
		  release-engineering job skills, the required mind-set, the
		  role of education, and cultural change, and they recommend
		  future research areas. The Web extra at
		  http://youtu.be/O3cJQTZXAI8 is an audio recording of Davide
		  Falessi speaking with Guest Editors Bram Adams and Foutse
		  Khomh about release engineering and its value to the
		  software industry.},
  doi		= {10.1109/MS.2015.52},
  issn		= {0740-7459},
  month		= {Mar}
}

@InBook{	  AnandBhatt_et_al2017,
  pages		= {121--138},
  title		= {Software Reliability Modeling with Impact of Beta Testing
		  on Release Decision},
  publisher	= {Springer International Publishing},
  year		= {2017},
  author	= {Anand, Adarsh and Bhatt, Navneet and Aggrawal, Deepti and
		  Papic, Ljubisa},
  editor	= {Ram, Mangey and Davim, J. Paulo},
  address	= {Berlin, Germany},
  isbn		= {978-3-319-48875-2},
  abstract	= {Increased dependence of humans on technologies has made it
		  necessary for developing the software with high reliability
		  and quality. This has led to an increased interest of firms
		  toward the development of software with high level of
		  efficiency; which can be achieved by incorporating beta
		  tests for improving and ensuring that the software is safe
		  and completely free from errors. In a software release life
		  cycle, beta testing is the last important step that
		  software developers carry out before they launch new
		  software. Beta testing is a unique testing process that
		  helps software developers to test a software product in
		  different environments before its final release in the
		  market. In this chapter of the book, we develop a SRGM by
		  inculcating the concept of beta testing in the fault
		  removal process to account for situations that might occur
		  when the software is used in diverse environments. This is
		  done to evade the chances of system being failed in the
		  field. Conducting beta tests results in enhancement of
		  software reliability and has been widely acknowledged.
		  Furthermore, we have developed an optimal scheduling model
		  and showed the importance of beta test while determining
		  the general availability time of the software and making
		  the system more cost effective. For validating the accuracy
		  and predictive capability of the proposed model, we
		  analyzed it on real software data set.},
  booktitle	= {Advances in Reliability and System Engineering}
}

@InProceedings{	  BaarsHorakh_et_al2007,
  title		= {Business Intelligence Outsourcing - A Framework},
  author	= {Baars, Henning and Horakh, TA and Kemper, Hans-Georg},
  booktitle	= {Proceedings of 15th European Conference on Information
		  Systems (ECIS 2007)},
  pages		= {1155--1166},
  year		= {2007},
  organization	= {European Conference on Information Systems},
  publisher	= {Association of Information Systems}
}

@Article{	  BarqawiSyed_et_al2016,
  author	= {Barqawi, Neda and Syed, Kamran and Mathiassen, Lars},
  title		= {Applying service-dominant logic to recurrent release of
		  software: an action research study},
  journal	= {Journal of Business \& Industrial Marketing},
  volume	= {31},
  number	= {7},
  pages		= {928-940},
  year		= {2016},
  doi		= {10.1108/JBIM-02-2015-0030},
  eprint	= { http://dx.doi.org/10.1108/JBIM-02-2015-0030
		  
		  },
  abstract	= { Purpose Fierce competition drives software vendors to
		  rely on Software-as-a-Service (SaaS) strategies and to
		  continuously match new releases with customers’ needs and
		  competitors’ moves. Such recurrent release practices pose
		  specific challenges for software vendors which shape how
		  they service customers. To address these challenges, this
		  paper aims to apply service science to innovate strategies
		  for SaaS release management. Design/methodology/approach
		  Based on action research methodology, the authors
		  collaborated closely with Software Inc., an alias for a
		  large multinational software provider, to apply
		  service-dominant logic systematically, to analyze and
		  improve its SaaS release management process and to support
		  ongoing value co-creation with its customers. Findings The
		  authors provide a detailed account of how Software Inc.
		  improved its SaaS release management practices; they extend
		  current understanding of service innovation dynamics in
		  SaaS environments and offer a model of value co-creation in
		  SaaS release management grounded in the findings from
		  Software Inc. Research limitations/implications The
		  research draws on a single case study with particular
		  characteristics. Still, it allows for analytical
		  generalizations with both theoretical and practical
		  implications for how SaaS managers can improve recurrent
		  release practices based on foundational service-dominant
		  logic principles. Practical implications The authors
		  suggest that SaaS managers concentrate on knowledge-sharing
		  with customers, ensure continuous communication among teams
		  supporting the service, re-organize release management to
		  enhance the value co-creation process, use technology to
		  improve customer service experiences and use service
		  mapping to improve release management and service quality.
		  Originality/value The authors bridge service-dominant logic
		  principles and SaaS knowledge by demonstrating how
		  service-dominant logic can be used to improve SaaS release
		  practices and by offering conceptual and practical
		  knowledge about value co-creation between customers and
		  suppliers in SaaS contexts. }
}

@Book{		  Bon2011,
  title		= {ITIL 2011 Edition - A Pocket Guide},
  author	= {van Bon, J.},
  isbn		= {9789087539788},
  series	= {Best Practice},
  no_url	= {https://books.google.fi/books?id=zUU4AQAAQBAJ},
  year		= {2011},
  publisher	= {Van Haren Publishing}
}

@InProceedings{	  CaterSteelTan_et_al2006,
  title		= {Challenge of adopting multiple process improvement
		  frameworks},
  author	= {Cater-Steel, Aileen and Tan, Wui-Gee and Toleman, Mark},
  booktitle	= {Proceedings of 14th European Conference on Information
		  Systems (ECIS 2006)},
  pages		= {1375--1386},
  year		= {2006},
  organization	= {European Conference on Information Systems},
  publisher	= {Association of Information Systems}
}

@Article{	  CavusogluCavusoglu_et_al2008,
  issn		= {00251909, 15265501},
  url		= {http://www.jstor.org/stable/20122418},
  abstract	= {Patch management is a crucial component of information
		  security management. An important problem within this
		  context from a vendor's perspective is to determine how to
		  release patches to fix vulnerabilities in its software.
		  From a firm's perspective, the issue is how to update
		  vulnerable systems with available patches. In this paper,
		  we develop a game-theoretic model to study the strategic
		  interaction between a vendor and a firm in balancing the
		  costs and benefits of patch management. Our objective is to
		  examine the consequences of time-driven release and update
		  policies. We first study a centralized system in a
		  benchmark scenario to find the socially optimal time-driven
		  patch management. We show that the social loss is minimized
		  when patch-release and update cycles are synchronized.
		  Next, we consider a decentralized system in which the
		  vendor determines its patch-release policy and the firm
		  selects its patch-update policy in a Stackelberg framework,
		  assuming that release and update policies are either time
		  driven or event driven. We develop a sufficient condition
		  that guarantees that a time-driven release by the vendor
		  and a time-driven update by the firm is the equilibrium
		  outcome for patch management. However, in this equilibrium,
		  the patch-update cycle of the firm may not be synchronized
		  with the patch-release cycle of the vendor, making it
		  impossible to achieve the socially optimal patch management
		  in the decentralized system. Therefore, we next examine
		  cost sharing and liability as possible coordination
		  mechanisms. Our analysis shows that cost sharing itself may
		  achieve synchronization and social optimality. However,
		  liability by itself cannot achieve social optimality unless
		  patch-release and update cycles are already synchronized
		  without introducing any liability. Our results also
		  demonstrate that cost sharing and liability neither
		  complement nor substitute each other. Finally, we show that
		  an incentive-compatible contract on cost sharing can be
		  designed to achieve coordination in case of information
		  asymmetry.},
  author	= {Hasan Cavusoglu and Huseyin Cavusoglu and Jun Zhang},
  journal	= {Management Science},
  number	= {4},
  pages		= {657--670},
  publisher	= {INFORMS},
  title		= {Security Patch Management: Share the Burden or Share the
		  Damage?},
  volume	= {54},
  year		= {2008}
}

@InProceedings{	  ChenKrishnan_et_al2013,
  author	= {Chen, Wei and Krishnan, Vish and Zhu, Kevin},
  title		= {"Release Early, Release Often"? An Empirical Analysis of
		  Release Strategy in Open Source Software Co-Creation.},
  booktitle	= {Pacific Asia Conference on Information Systems},
  year		= {2013},
  pages		= {11}
}

@Book{		  Chittenden1970,
  title		= {IT Outsourcing Part 2: Managing the Sourcing Contract},
  author	= {Chittenden, J.},
  isbn		= {9789087536176},
  series	= {Best Practice: Business Management},
  year		= {1970},
  publisher	= {Van Haren Publishing}
}

@Article{	  ChoudharyZhang2015,
  author	= {Choudhary, Vidyanand and Zhang, Zhe (James)},
  title		= {Research Note—Patching the Cloud: The Impact of SaaS on
		  Patching Strategy and the Timing of Software Release},
  journal	= {Information Systems Research},
  volume	= {26},
  number	= {4},
  pages		= {845-858},
  year		= {2015},
  doi		= {10.1287/isre.2015.0601},
  eprint	= { https://doi.org/10.1287/isre.2015.0601
		  
		  },
  abstract	= { This paper extends prior research on the software
		  vendors’ optimal release time and patching strategy in
		  the context of cloud computing and software as a service
		  (SaaS). Traditionally, users are responsible for running
		  on-premises software; by contrast, a vendor is responsible
		  for running SaaS software, and the SaaS vendor incurs a
		  larger proportion of defect-related costs than a vendor of
		  on-premises software. We examine the effect of this
		  difference on a vendor’s choice of when to release
		  software and the proportion of software defects to fix.
		  Surprisingly, we find that, despite incurring a larger
		  proportion of defect-related costs, it is optimal for the
		  SaaS vendor to release software earlier and with more
		  defects, and to patch a smaller proportion of defects, than
		  the on-premises software vendor. Even though the SaaS
		  vendor incurs higher defect-related costs, he obtains a
		  larger profit than the traditional vendor. In addition, we
		  find that for a vendor who uses the SaaS model, the optimal
		  number of defects after patching may be lower than the
		  socially efficient outcome. This occurs despite the fact
		  that the number of defects after patching in the SaaS model
		  is higher than in the traditional on-premises model. }
}

@Article{	  ChouHe2007,
  year		= {2007},
  author	= {Chou, Shih-Wei and He, Mong-Young},
  title		= {The factors that affect the performance of open source
		  software development – the perspective of social capital
		  and expertise integration},
  journal	= {Information Systems Journal},
  volume	= {21},
  number	= {2},
  pages		= {195-219},
  doi		= {10.1111/j.1365-2575.2009.00347.x},
  eprint	= {https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1365-2575.2009.00347.x}
		  ,
  abstract	= {Abstract Drawing on social capital theory, we develop a
		  theoretical model aiming to explore how open source
		  software (OSS) project effectiveness (in terms of team
		  size, team effort and team's level of completion) is
		  affected by expertise integration. This in turn is
		  influenced by three types of social capital – relational
		  capital, cognitive capital and structural capital. In
		  addition, this study also examines two moderating effects
		  – the impact of technical complexity on the relationship
		  between cognitive capital and expertise integration, and of
		  task interdependence on the relationship between expertise
		  integration and task completion. Through a field survey of
		  160 OSS members from five Taiwanese communities, there is
		  support for some of the proposed hypotheses. Both
		  reciprocity and centrality affect expertise integration as
		  expected, but the influence of commitment and cognitive
		  capital (including expertise and tenure) on expertise
		  integration is not significant. Finally, expertise
		  integration affects both team size and team effort, which
		  in turn jointly influence task completion. This research
		  contributes to advancing theoretical understanding of the
		  effectiveness of free OSS development as well as providing
		  OSS practitioners with insight into how to leverage social
		  capital for improving the performance of OSS development.}
}

@InProceedings{	  ClevelandEllis2013,
  author	= {Cleveland, Simon and Ellis, Timothy J},
  title		= {Toward a model for customer-driven release management},
  booktitle	= {Americas Conference on Information Systems},
  year		= {2013}
}

@Article{	  ClevelandEllis2014,
  title		= {Orchestrating end-user perspectives in the software
		  release process: An integrated release management
		  framework},
  author	= {Cleveland, Simon and Ellis, Timothy J},
  journal	= {Advances in Human-Computer Interaction},
  volume	= {2014},
  pages		= {13},
  year		= {2014},
  publisher	= {Hindawi Publishing Corp.}
}

@Article{	  ColazoFang2010,
  title		= {Following the sun: Temporal dispersion and performance in
		  open source software project teams},
  author	= {Colazo, Jorge A and Fang, Yulin},
  journal	= {Journal of the Association for Information Systems},
  volume	= {11},
  number	= {11},
  pages		= {684},
  year		= {2010},
  publisher	= {Association for Information Systems}
}

@Article{	  CustodioThorogood_et_al2006,
  author	= {Custodio, Miguel Gabriel and Thorogood, Alan and Yetton,
		  Philip},
  title		= {24 x 7 @ full speed: accelerated time to market},
  journal	= {Journal of Information Technology},
  year		= {2006},
  month		= {Jun},
  day		= {01},
  volume	= {21},
  number	= {2},
  pages		= {116--126},
  abstract	= {`It's only a web site. What could be so difficult about
		  that?' This quote is from the cafeteria of a start-up
		  business funded by a North American retailer, after the
		  disastrous `Black Friday' of 2000, during which its web
		  site experienced systemic failure. This case describes the
		  dynamics, complexities and consequences of fast tracking an
		  e-business start-up. This consumer electronics retailer
		  created one of the most visited retail web sites, from
		  concept to operation in 6 months. Market analysts were
		  predicting a major increase in online sales while consumers
		  were adopting the Internet at a rate faster than any
		  previous technology. Meeting the multi-channel demands of
		  the dynamic and competitive environment required
		  operational balance, stability, innovative flexibility,
		  organizational fit and the alignment of resource
		  capabilities with technology. This case challenges the
		  reader to comment on how a large company positioned itself
		  and integrated the necessary competencies to compete
		  successfully in a developing market by establishing a
		  spin-off operation, separate from the main company.},
  issn		= {1466-4437},
  doi		= {10.1057/palgrave.jit.2000058}
}

@Book{		  Davies2016,
  title		= {ITIL Foundation All-in-One Exam Guide},
  author	= {Davies, J.},
  isbn		= {9780071842136},
  lccn		= {2016036216},
  series	= {All-in-One},
  no_url	= {https://books.google.fi/books?id=EjWrDAAAQBAJ},
  year		= {2016},
  publisher	= {McGraw-Hill Education}
}

@Article{	  DeodharSaxena_et_al2012,
  title		= {Strategies for software-based hybrid business models},
  journal	= {The Journal of Strategic Information Systems},
  volume	= {21},
  number	= {4},
  pages		= {274 - 294},
  year		= {2012},
  issn		= {0963-8687},
  doi		= {10.1016/j.jsis.2012.06.001},
  url		= {http://www.sciencedirect.com/science/article/pii/S0963868712000248}
		  ,
  author	= {Swanand J. Deodhar and K.B.C. Saxena and Rajen K. Gupta
		  and Mikko Ruohonen},
  abstract	= {The open source approach to software development has been
		  used by software organizations in tandem with their
		  existing business models, which are based on proprietary
		  software licensing. This led to the creation of hybrid
		  business models that merge open source and proprietary
		  paradigms. This paper explores the practices used by
		  software product vendors using hybrid business models and
		  proposes strategies emerging out of these practices using
		  interpretive, single case study research design.}
}

@InProceedings{	  DidarAlAlamKarim_et_al2016,
  author	= {Didar Al Alam, S. M. and Karim, Muhammad Rezaul and Pfahl,
		  Dietmar and Ruhe, G\"{u}nther},
  title		= {Comparative Analysis of Predictive Techniques for Release
		  Readiness Classification},
  booktitle	= {Proceedings of the 5th International Workshop on Realizing
		  Artificial Intelligence Synergies in Software Engineering},
  series	= {RAISE '16},
  year		= {2016},
  isbn		= {978-1-4503-4165-3},
  location	= {Austin, Texas},
  pages		= {15--21},
  numpages	= {7},
  doi		= {10.1145/2896995.2896997},
  acmid		= {2896997},
  publisher	= {ACM},
  address	= {New York, NY, USA}
}

@InProceedings{	  Erenkrantz2003,
  title		= {Release management within open source projects},
  author	= {Erenkrantz, Justin R},
  booktitle	= {Proceedings of the 3rd. Workshop on Open Source Software
		  Engineering},
  year		= {2003},
  url		= {https://flosshub.org/system/files/51-55.pdf}
}

@Article{	  Glance2004,
  author	= {David Glance},
  title		= {Release criteria for the Linux kernel},
  journal	= {First Monday},
  volume	= {9},
  number	= {4},
  year		= {2004},
  abstract	= { Before software is released to its users, software
		  developers will ensure that the software has met specified
		  functional and technical requirements and that it is as
		  free from bugs as possible. Users should be able to have a
		  high degree of confidence that the software will perform as
		  specified and without fault. With open source development
		  practices such as those employed on the Linux kernel
		  project, there are no detailed specifications and little
		  formal testing processes. The questions, then, are what
		  criteria, if any, are used in determining the suitability
		  for release of a particular version of this software, and
		  do users have any degree of confidence in the quality of
		  that release of software? These questions were examined in
		  this study using information from the Linux Kernel Mailing
		  List (LKML), the primary forum for discussion of
		  development issues of the Linux kernel, and change logs
		  submitted with version releases of the Linux kernel. It was
		  determined that very little planning is employed in
		  determining the release of a particular version of the
		  software and that a version of the software is essentially
		  a collection of source patches released at regular
		  intervals with some stabilisation of the code base before
		  each release. Very little attempt is made to verify that
		  the code is bug free, and consequently, the code released
		  is of a largely unknown level of quality. End users are
		  left to decide for themselves the suitability and
		  robustness of a particular version of the software.
		  
		  },
  issn		= {13960466},
  doi		= {10.5210/fm.v9i4.1136},
  url		= {http://uncommonculture.org/ojs/index.php/fm/article/view/1136}
		  
}

@Book{		  GovernmentCommerce2005,
  title		= {Introduction to {ITIL}},
  isbn		= {9780113309733},
  series	= {Best practice},
  year		= {2005},
  publisher	= {Stationery Office},
  author	= {Office of Government Commerce},
  shortauthor	= {OGC},
  no_url	= {https://books.google.fi/books?id=fkfwTGzmERMC}
}

@Article{	  HannRoberts_et_al2013,
  author	= {Hann, Il-Horn and Roberts, Jeffrey A. and Slaughter,
		  Sandra A.},
  title		= {All Are Not Equal: An Examination of the Economic Returns
		  to Different Forms of Participation in Open Source Software
		  Communities},
  journal	= {Information Systems Research},
  volume	= {24},
  number	= {3},
  pages		= {520-538},
  year		= {2013},
  doi		= {10.1287/isre.2013.0474},
  eprint	= {
		  https://pubsonline.informs.org/doi/pdf/10.1287/isre.2013.0474
		  
		  }
		  ,
  abstract	= { Open source software (OSS) communities live and die with
		  the continuous contributions of programmers who often
		  participate without direct remuneration. An intriguing
		  question is whether such sustained participation in OSS
		  projects yields economic benefits to the participants.
		  Moreover, as participants engage in OSS projects, they take
		  on different roles and activities in the community. This
		  raises additional questions of whether different forms of
		  participation in OSS communities are associated with
		  different economic rewards and, if so, in which contexts.
		  In this paper, we draw upon theories of signaling and job
		  matching to hypothesize that participants who possess
		  “proof” of their skills in OSS projects are financially
		  rewarded for their activities in the labor market. More
		  specifically, we distinguish between participation in OSS
		  communities that is associated with a signaling value for
		  unobserved productivity characteristics and an additional
		  value that accrues to participants whose OSS roles and
		  activities match those in their paid employment. Following
		  a cohort of OSS programmers over a six-year period, we
		  empirically examine the wages and OSS performance of
		  participants in three of the foremost OSS projects
		  operating within the Apache Software Foundation.
		  Controlling for individual characteristics and other
		  wage-related factors, our findings reveal that credentials
		  earned through a merit-based ranking system are associated
		  with as much as an 18\% increase in wages. Moreover, we
		  find that participants who have OSS project management
		  responsibilities receive additional financial rewards if
		  their professional job is in IT management. These findings
		  suggest that rank within an OSS meritocracy is a credible
		  and precise signal of participants' productive capacity and
		  that participants' roles and activities in an OSS community
		  have additional financial value when aligned with their
		  paid employment. }
}

@InProceedings{	  HoekHall_et_al1997,
  author	= {van der Hoek, Andr{\'e} and Hall, Richard S. and
		  Heimbigner, Dennis and Wolf, Alexander L.},
  title		= {Software Release Management},
  booktitle	= {Proceedings of the 6th European SOFTWARE ENGINEERING
		  Conference Held Jointly with the 5th ACM SIGSOFT
		  International Symposium on Foundations of Software
		  Engineering},
  series	= {ESEC '97/FSE-5},
  year		= {1997},
  isbn		= {3-540-63531-9},
  location	= {Zurich, Switzerland},
  pages		= {159--175},
  numpages	= {17},
  doi		= {10.1145/267895.267909},
  acmid		= {267909},
  publisher	= {Springer-Verlag New York, Inc.},
  address	= {New York, NY, USA}
}

@Book{		  Howard2016,
  title		= {IT release management: a hands-on guide},
  author	= {Howard, Dave},
  year		= {2016},
  publisher	= {CRC Press}
}

@Proceedings{	  IharaFujibayashi_et_al2017,
  title		= {Understanding When to Adopt a Library: A Case Study on ASF
		  Projects},
  year		= {2017},
  editor	= {Balaguer, Federico and Di Cosmo, Roberto and Garrido,
		  Alejandra and Kon, Fabio and Robles, Gregorio and
		  Zacchiroli, Stefano},
  series	= {Open Source Systems: Towards Robust Practices},
  address	= {Berlin, Germany},
  publisher	= {Springer International Publishing},
  isbn		= {978-3-319-57735-7},
  abstract	= {Software libraries are widely used by both industrial and
		  open source client projects. Ideally, a client user of a
		  library should adopt the latest version that the library
		  project releases. However, sometimes the latest version is
		  not better than a previous version. This is because the
		  latest version may include additional developer effort to
		  test and integrate all changed features. In this study, our
		  main goal is to better understand the relationship between
		  adoption of library versions and its release cycle.
		  Specifically, we conducted an empirical study of release
		  cycles for 23 libraries and how they were adopted by 415
		  Apache Software Foundation (ASF) client projects. Our
		  findings show that software projects are quicker to update
		  earlier rapid-release libraries compared to library
		  projects with a longer release cycle. Moreover, results
		  suggest that software projects are more likely to adopt the
		  latest version of a rapid-release library compared to
		  libraries with a longer release cycles.},
  author	= {Ihara, Akinori and Fujibayashi, Daiki and Suwa, Hirohiko
		  and Kula, Raula Gaikovina and Matsumoto, Kenichi},
  booktitle	= {IFIP International Conference on Open Source Systems},
  doi		= {10.1007/978-3-319-57735},
  pages		= {128--138}
}

@Article{	  IravaniDasu_et_al2012,
  issn		= {0030364X, 15265463},
  url		= {http://www.jstor.org/stable/23323702},
  no_abstract	= {Every year, companies that produce commercial tax
		  preparation software struggle with thousands of state and
		  federal changes to tax laws and forms. Three competitors
		  dominate the market with its short selling season, and
		  release delays slash profits. Tax authorities issue updates
		  August—December, and all changes must be processed and
		  incorporated before year end. Systematic resource
		  allocation and process management are crucial yet
		  problematic due to the volume and complexity of changes,
		  brief production time frame, and feedback loops for bug
		  resolution. A leading tax software provider asked us to
		  propose systematic approaches for managing process flow and
		  staffing development stages with the goal of releasing the
		  new version on time at minimum cost. To that end, we
		  developed deterministic models that partitioned tax forms
		  into development groups and determined staffing levels for
		  each group. Partitioning forms into groups simplified
		  workflow management and staffing decisions. To provide a
		  range of resource configurations, we used two modeling
		  approaches. Numerical experiments showed that our models
		  capture the salient features of the process and that our
		  heuristics perform well. Implementing our models reduced
		  company overtime hours by 31% and total workforce cost by
		  13%.},
  author	= {Foad Iravani and Sriram Dasu and Reza Ahmadi},
  journal	= {Operations Research},
  number	= {6},
  pages		= {1310--1322},
  publisher	= {INFORMS},
  title		= {A Hierarchical Framework for Organizing a Software
		  Development Process},
  volume	= {60},
  year		= {2012}
}

@Article{	  Jrgensen2001,
  title		= {Putting it all in the trunk: incremental software
		  development in the FreeBSD open source project},
  author	= {J{\o}rgensen, Niels},
  journal	= {Information Systems Journal},
  volume	= {11},
  number	= {4},
  pages		= {321--336},
  year		= {2001},
  publisher	= {Wiley Online Library}
}

@InProceedings{	  KajkoMattssonNyfjord2009,
  author	= {M. Kajko-Mattsson and J. Nyfjord},
  booktitle	= {2009 42nd Hawaii International Conference on System
		  Sciences},
  title		= {A Model of Agile Evolution and Maintenance Process},
  year		= {2009},
  volume	= {},
  number	= {},
  pages		= {1-10},
  doi		= {10.1109/HICSS.2009.21},
  issn		= {1530-1605},
  month		= {Jan}
}

@InProceedings{	  Krishnan1994,
  author	= {Krishnan, Mayuram S.},
  title		= {Software Release Management: A Business Perspective},
  booktitle	= {Proceedings of the 1994 Conference of the Centre for
		  Advanced Studies on Collaborative Research},
  series	= {CASCON '94},
  year		= {1994},
  location	= {Toronto, Ontario, Canada},
  pages		= {36--},
  url		= {http://dl.acm.org/citation.cfm?id=782185.782221},
  acmid		= {782221},
  publisher	= {IBM Press}
}

@InProceedings{	  KäköläKoivulahtiOjala2009,
  original_author	= {Käkölä, Timo and Koivulahti-Ojala,},
  booktitle	= {2009 42nd Hawaii International Conference on System
		  Sciences},
  title		= {An Information Systems Design Theory for Integrated
		  Requirements and Release Management Systems},
  year		= {2009},
  volume	= {},
  number	= {},
  pages		= {1-10},
  doi		= {10.1109/HICSS.2009.66},
  issn		= {1530-1605},
  month		= {Jan}
}

@Article{	  KäköläKoivulahtiOjala_et_al2010,
  author	= {Käkölä, Timo and Koivulahti-Ojala, Mervi and
		  Liimatainen, Jani},
  title		= {An information systems design product theory for the class
		  of integrated requirements and release management systems},
  journal	= {Journal of Software Maintenance and Evolution: Research
		  and Practice},
  volume	= {23},
  year		= {2010},
  number	= {6},
  pages		= {443-463},
  doi		= {10.1002/smr.492},
  eprint	= {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.492},
  abstract	= {Abstract High-tech companies conducting product
		  development need to collect and analyze requirements
		  effectively, plan and implement releases, and allocate
		  requirements to appropriate releases. Requirements and
		  release management are complicated because development
		  activities typically are scattered across multiple sites,
		  involve multiple partners in different countries, leverage
		  various development methods and tools, and are realized
		  through various organizational arrangements such as release
		  projects in organizations structured around products and
		  permanent release teams in organizations responsible for
		  the long-term development and maintenance of strategic
		  software and hardware assets. Flexible, scalable, and
		  secure groupware-based support for the activities provides
		  substantial payoffs. Yet, the extant literature provides
		  little theoretical guidance for designing and using
		  requirements and release management systems (RRMS) in
		  multi-site, multi-partner environments. This article
		  develops the meta-requirements and a meta-design of an
		  Information Systems Design Product Theory for the class of
		  RRMS based on a case study in a global company and a
		  literature review. The theory is scalable to meet the needs
		  of global companies but simple enough so that small and
		  medium-sized companies can also leverage it to implement
		  requirements and release management solutions. Copyright ©
		  2010 John Wiley \& Sons, Ltd.}
}

@InProceedings{	  LahtelaJantti2011,
  real_author	= {A. Lahtela and M. Jäntti},
  author	= {A. Lahtela and M. J\"{a}ntti},
  booktitle	= {2nd International Conference on Software Engineering and
		  Service Science},
  title		= {Challenges and problems in release management process: A
		  case study},
  year		= {2011},
  pages		= {10-13},
  abstract	= {The IT Infrastructure Library (ITIL) is the most widely
		  used IT service management framework and a de facto
		  standard. ITIL provides instructions for IT service
		  providers and organizations how to design, manage and
		  support IT services. However, adopting best practices of
		  ITIL can be difficult for many IT companies. The main
		  contribution of this paper is to present challenges and
		  problems that were identified during a case study focusing
		  on improvement of the release management process. Key
		  challenges included the lack of process description, too
		  high release distribution rate, and poor traceability
		  between incident records and release records.},
  doi		= {10.1109/ICSESS.2011.5982242},
  issn		= {2327-0586},
  month		= {July},
  publishe	= {IEEE}
}

@Article{	  LaukkanenPaasivaara_et_al2018,
  author	= {Laukkanen, Eero and Paasivaara, Maria and Itkonen, Juha
		  and Lassenius, Casper},
  title		= {Comparison of release engineering practices in a large
		  mature company and a startup},
  journal	= {Empirical Software Engineering},
  year		= {2018},
  month		= {Mar},
  day		= {28},
  abstract	= {Modern release engineering practices provide multiple
		  benefits for software companies, but organizations have
		  struggled when trying to adopt the most advanced practices,
		  such as continuous delivery. It is not known in which
		  contexts the most advanced practices are applicable and
		  what can be achieved by adopting them. In this study, we
		  discuss the effect of the organizational context on adopted
		  release engineering practices and what outcomes are
		  achieved with the practices. We study two organizational
		  contexts: the startup and the large mature company context.
		  The effect of the product context is mitigated by studying
		  two case organizations with similar products, a rare
		  research opportunity. We performed 18 interviews with
		  various roles in the case organizations. The number of
		  production environments, the number of customers, the
		  control over the production environment, the available
		  resources, the organization size and the distribution of
		  the organization affected the release engineering practices
		  and the ability to release frequently. Having less internal
		  verification and more customer verification enabled fast
		  feedback and customer experimentation in the startup
		  context, but increased the number of production defects.
		  However, having more internal verification in the large
		  mature company context surprisingly did not prevent
		  production defects. The organizational context had a large
		  effect on how achievable modern release engineering
		  practices, such as continuous delivery, were. In the
		  startup context, the lack of resources was the main factor
		  hindering the improvement of release engineering practices,
		  while in the large mature company context, the number of
		  stakeholders and products were the main factors.},
  issn		= {1573-7616},
  doi		= {10.1007/s10664-018-9616-7}
}

@InProceedings{	  LuKakola2011,
  title		= {A dynamic life-cycle model for the provisioning of
		  software testing services: experiences from a case study in
		  the Chinese ICT sourcing market},
  author	= {Lu, Yikun and K{\"a}k{\"o}l{\"a}, Timo},
  booktitle	= {Proceedings of the 19th European Conference on Information
		  Systems (ECIS 2011)},
  year		= {2011},
  organization	= {Association for Information Systems}
}

@Article{	  McNaughtonRay_et_al2010,
  title		= {Designing an evaluation framework for IT service
		  management},
  journal	= {Information \& Management},
  volume	= {47},
  number	= {4},
  pages		= {219 - 225},
  year		= {2010},
  issn		= {0378-7206},
  doi		= {10.1016/j.im.2010.02.003},
  url		= {http://www.sciencedirect.com/science/article/pii/S0378720610000236}
		  ,
  author	= {Blake McNaughton and Pradeep Ray and Lundy Lewis},
  abstract	= {Applying IT Service Management (ITSM) is a key issue in
		  the management of an organisation's IT function. The IT
		  Infrastructure Library (ITIL) is the most popular and
		  influential framework for applying ITSM. With adoption
		  growing globally it is important to understand the benefits
		  that ITIL processes can bring to an organisation. To date
		  the benefits of implementing and using ITIL processes have
		  been predicted or assumed with very little research and
		  minimal anecdotal evidence. We present a design of a
		  holistic evaluation framework for ITSM improvement efforts
		  with particular focus on ITIL.}
}

@PhDThesis{	  Michlmayr2007,
  author	= {Martin Michlmayr},
  title		= {Quality Improvement in Volunteer Free and Open Source
		  Software Projects – Exploring the Impact of Release
		  Management},
  school	= {University of Cambridge},
  year		= {2007}
}

@Article{	  MichlmayrFitzgerald2012,
  title		= {Time-based release management in free and open source
		  (FOSS) projects},
  author	= {Michlmayr, Martin and Fitzgerald, Brian},
  journal	= {International Journal of Open Source Software and
		  Processes (IJOSSP)},
  volume	= {4},
  number	= {1},
  pages		= {1--19},
  year		= {2012},
  publisher	= {IGI Global}
}

@Article{	  MichlmayrFitzgerald_et_al2015,
  author	= {Michlmayr, Martin and Fitzgerald, Brian and Stol,
		  Klaas-Jan},
  title		= {Why and How Should Open Source Projects Adopt Time-Based
		  Releases?},
  journal	= {IEEE Software},
  year		= {2015},
  volume	= {32},
  number	= {2},
  pages		= {55--63},
  publisher	= {IEEE}
}

@InProceedings{	  MichlmayrHunt_et_al2007,
  author	= {Michlmayr, Martin and Hunt, Francis and Probert, David},
  title		= {Release management in free software projects: Practices
		  and problems},
  booktitle	= {IFIP International Conference on Open Source Systems},
  year		= {2007},
  pages		= {295--300},
  address	= {Berlin, Germany},
  organization	= {Springer}
}

@InProceedings{	  MullerHerbst_et_al2006,
  author	= {M{\"u}ller, Dominic and Herbst, Joachim and Hammori,
		  Markus and Reichert, Manfred},
  title		= {IT Support for Release Management Processes in the
		  Automotive Industry},
  booktitle	= {International Conference on Business Process Management
		  (BPM 2006)},
  year		= {2006},
  editor	= {Dustdar, Schahram and Fiadeiro, Jos{\'e} Luiz and Sheth,
		  Amit P.},
  pages		= {368--377},
  address	= {Berlin, Heidelberg},
  publisher	= {Springer Berlin Heidelberg},
  abstract	= {Car development is based on long running, concurrently
		  executed and highly dependent processes. The coordination
		  and synchronization of these processes has become a complex
		  and error-prone task due to the increasing number of
		  functions and embedded systems in modern cars. These
		  systems realize advanced features by embedded software and
		  enable the distribution of functionality as required, for
		  example, by safety equipment. Different life cycle times of
		  mechanical, software and hardware components as well as
		  different duration of their development processes require
		  efficient coordination. Furthermore, product-driven process
		  structures, dynamic adaptation of these structures, and
		  handling real-world exceptions result in challenging
		  demands for any IT system. In this paper we elaborate
		  fundamental requirements for the IT support of car
		  development processes, taking release management as
		  characteristic example. We show to which extent current
		  product data and process management technology meets these
		  requirements, and discuss which essential limitations still
		  exist. This results in a number of fundamental challenges
		  requiring new paradigms for the product-driven design,
		  enactment and adaptation of processes.},
  isbn		= {978-3-540-38903-3}
}

@InProceedings{	  NarayanFinis_et_al2012,
  title		= {Leveraging Traceability between Code and Tasks for Code
		  Review and Release Management},
  author	= {Narayan, Nitesh and Finis, Jan and Li, Yang and Delater,
		  Alexander},
  booktitle	= {Proceedings of the 7th International Conference on
		  Software Engineering Advances (ICSEA)},
  pages		= {8--14},
  year		= {2012}
}

@Book{		  Ould1999,
  title		= {Managing software quality and business risk},
  author	= {Ould, M.A.},
  isbn		= {9780471997825},
  lccn		= {99032078},
  no_url	= {https://books.google.fi/books?id=C3FGAAAAYAAJ},
  year		= {1999},
  publisher	= {John Wiley \& Sons}
}

@PhDThesis{	  PooCaamano2016,
  title		= {Release management in free and open source software
		  ecosystems},
  author	= {Poo-Caama{\~n}o, Germ{\'a}n},
  year		= {2016},
  school	= {University of Victoria, Canada}
}

@Article{	  PooCaamanoKnauss_et_al2017,
  author	= {Poo-Caama{\~{n}}o, Germ{\'a}n and Knauss, Eric and Singer,
		  Leif and German, Daniel M.},
  title		= {Herding cats in a FOSS ecosystem: a tale of communication
		  and coordination for release management},
  journal	= {Journal of Internet Services and Applications},
  year		= {2017},
  no_month	= {Aug},
  day		= {30},
  volume	= {8},
  number	= {1},
  pages		= {12},
  abstract	= {Release management in large-scale software development
		  projects requires significant communication and
		  coordination. It is particularly challenging in Free and
		  Open Source Software (FOSS) ecosystems, in which hundreds
		  of loosely connected developers and their projects are
		  coordinated to release software to a schedule. To better
		  understand this process and its challenges, we analyzed
		  over two and half years of communication in the GNOME
		  ecosystem and studied developers' interactions. Through a
		  case study, we cataloged communication channels, determined
		  the main channel from which we categorized high level
		  communication and coordination activities spanning five
		  releases, and triangulated our results by interviewing ten
		  key developers. We found that a release schedule, influence
		  (instead of direct control), and diversity are the main
		  factors that positively impact the release process in the
		  GNOME ecosystem. We report a set of lessons learned that
		  encapsulates our understanding of how the Release
		  Management process function in a FOSS ecosystem, we learned
		  that: (1) ensure that the release team follows the main
		  communication channels used by developers, (2) provide a
		  common place for coordination for an ecosystem, (3)
		  consider including both good technical and social skills in
		  a release team, (4) aim for a diverse release team, (5)
		  based on lack of power, lobbying and consensus based
		  management must be followed, (6) help the release team in
		  the coordination process with a well defined schedule, and
		  (7) release team work is different from regular software
		  work. Our results can help organizations build better
		  large-scale teams and show that research focused on
		  individual projects might miss important parts of the
		  picture.},
  issn		= {1869-0238},
  doi		= {10.1186/s13174-017-0063-2}
}

@InProceedings{	  PortWilf2013,
  author	= {D. Port and J. Wilf},
  booktitle	= {2013 ACM / IEEE International Symposium on Empirical
		  Software Engineering and Measurement},
  title		= {The Value of Certifying Software Release Readiness: An
		  Exploratory Study of Certification for a Critical System at
		  JPL},
  year		= {2013},
  pages		= {373-382},
  abstract	= {A software release is a decision to deliver code to an
		  organization outside of the development team usually for
		  testing or operational purposes. For critical systems this
		  can be a risky decision where failure to pass a test or
		  holding up the project schedule can have a major impact.
		  The release decision is primarily based on the
		  understanding on the level of quality the software
		  currently has (be it high quality, low quality, or
		  unknown). But for large, complex systems, determining the
		  level of quality with high confidence is a challenge. A
		  poor understanding of the confidence in the quality level
		  increases decision risk leading potentially to a bad
		  release decision that possibly could have been avoided had
		  the confidence in the quality been better known.
		  Certification of release readiness attempts to address this
		  risk by building confidence in the quality level. But this
		  comes at a cost and the relationship between certification
		  and decision risk reduction has not been well understood.
		  This work describes our experience investigating the value
		  of certification and our efforts to improve the mandated
		  software readiness certification record (SRCR) process. A
		  well known critical system at JPL is used as a case study
		  to exemplify this effort.},
  doi		= {10.1109/ESEM.2013.54},
  issn		= {1949-3770},
  month		= {Oct}
}

@InProceedings{	  RautiainenLassenius_et_al2002,
  author	= {K. Rautiainen and C. Lassenius and J. Vahaniitty and M.
		  Pyhajarvi and J. Vanhanen},
  booktitle	= {Proceedings of the 35th Annual Hawaii International
		  Conference on System Sciences},
  title		= {A tentative framework for managing software product
		  development in small companies},
  year		= {2002},
  volume	= {},
  number	= {},
  pages		= {3409-3417},
  doi		= {10.1109/HICSS.2002.994377},
  issn		= {},
  month		= {Jan}
}

@InCollection{	  Ruhe2005,
  title		= {Software release planning},
  author	= {Ruhe, G{\"u}nther},
  booktitle	= {Handbook of Software Engineering and Knowledge
		  Engineering},
  editor	= {S. K. Chang},
  pages		= {365-393},
  year		= {2005},
  publisher	= {World Scientific},
  doi		= {10.1142/9789812775245_0013},
  eprint	= {https://www.worldscientific.com/doi/pdf/10.1142/9789812775245_0013}
		  ,
  abstract	= { Abstract Incremental software development replaces
		  monolithic-type development by offering a series of
		  releases with additive functionality. To create optimal
		  value under existing project constraints, the question is
		  what should be done when? Release planning is giving the
		  answer. It determines proper priorities and assigns
		  features to releases. Comprehensive stakeholder involvement
		  ensures a high degree of applicability of the results. The
		  formal procedure of release planning is able to consider
		  different criteria (urgency, importance) and to bring them
		  together in a balanced way. Release planning is based on
		  (estimates of) the implementation effort. In addition,
		  constraints related to risk, individual resources necessary
		  to implement the proposed features, money, or technological
		  dependencies can be easily adopted into the release
		  planning approach presented in this article. Releases are
		  known to be new versions of an evolving product. However,
		  the idea of a release is not restricted to this, but can be
		  applied to any type of periodic development where a release
		  would correspond to an annual or quarterly time period. The
		  special case of one release called prioritization is of
		  even larger applicability wherever competing items have
		  been selected under additional constraints. An informal and
		  later a formal problem description of the release planning
		  problem is given. Ad hoc or just experience-based planning
		  techniques are not able to accommodate size, complexity and
		  the high degree of uncertainty of the problem. Plans
		  generated in this way will typically result in unsatisfied
		  customers, time and budget overruns, and a loss in market
		  share. As a consequence of the analysis of the current
		  state-of-the practice, we propose a more advanced approach
		  based on the strengths of intelligent software engineering
		  decision support. Existing release planning methods and
		  tool support are analyzed. An intelligent tool support
		  called ReleasePlanner® is presented. The web-based tool is
		  based on an iterative and evolutionary solution procedure
		  and combines the computational strength of specialized
		  optimization algorithms with the flexibility of intelligent
		  decision support. It helps to generate and evaluate
		  candidate solutions. As a final result, a small number of
		  most promising alternative release plans are offered to the
		  actual decision-maker. Special emphasis is on facilitating
		  what-if scenarios and on supporting re-planning. Different
		  usage scenarios and a case study project are presented.
		  Practical experience from industrial application of
		  ReleasePlanner® is included as well. Future directions of
		  research are discussed. }
}

@Book{		  Ruhe2010,
  title		= {Product Release Planning: Methods, Tools and
		  Applications},
  author	= {Ruhe, G.},
  isbn		= {9781420004113},
  no_url	= {https://books.google.fi/books?id=rVvLBQAAQBAJ},
  year		= {2010},
  publisher	= {CRC Press}
}

@Article{	  RuheSaliu2005,
  author	= {G. Ruhe and M. O. Saliu},
  journal	= {IEEE Software},
  title		= {The art and science of software release planning},
  year		= {2005},
  volume	= {22},
  number	= {6},
  pages		= {47-53},
  abstract	= {Incremental development provides customers with parts of a
		  system early, so they receive both a sense of value and an
		  opportunity to provide feedback early in the process. Each
		  system release is thus a collection of features that the
		  customer values. Furthermore, each release serves to fix
		  defects detected in former product variants. Release
		  planning (RP) addresses decisions related to selecting and
		  assigning features to create a sequence of consecutive
		  product releases that satisfies important technical,
		  resource, budget, and risk constraints.},
  doi		= {10.1109/MS.2005.164},
  issn		= {0740-7459},
  month		= {Nov}
}

@Article{	  SharmaSugumaran_et_al2002,
  author	= {Sharma, Srinarayan and Sugumaran, Vijayan and Rajagopalan,
		  Balaji},
  title		= {A framework for creating hybrid-open source software
		  communities},
  journal	= {Information Systems Journal},
  volume	= {12},
  year		= {2002},
  number	= {1},
  pages		= {7-25},
  doi		= {10.1046/j.1365-2575.2002.00116.x},
  eprint	= {https://onlinelibrary.wiley.com/doi/pdf/10.1046/j.1365-2575.2002.00116.x}
		  ,
  abstract	= {Abstract The open source software (OSS) model is a
		  fundamentally new and revolutionary way to develop
		  software. The success of the OSS model is also setting the
		  stage for a structural change in the software industry; it
		  is beginning to transform software industry from
		  manufacturing to a service industry. Despite the success of
		  the OSS model, for-profit organizations are having
		  difficulty building a business model around the open source
		  paradigm. Whereas there are some isolated empirical
		  studies, little rigorous research has been done on how
		  traditional organizations can implement and benefit from
		  OSS practices. This research explores how organizations can
		  foster an environment similar to OSS to manage their
		  software development efforts to reap its numerous
		  advantages. Drawing on organizational theory, we develop a
		  framework that guides the creation and management of a
		  hybrid-OSS community within an organization. We discuss the
		  implications of this framework and suggest areas for future
		  research.}
}

@Book{		  Society2014,
  editors	= {Bourque, P. and Fairley, R.E.},
  title		= {Guide to the Software Engineering Body of Knowledge ):
		  Version 3. 0},
  author	= {IEEE Computer Society},
  isbn		= {9780769551661},
  url		= {https://www.computer.org/web/swebok},
  year		= {2014},
  publisher	= {IEEE Computer Society Press}
}

@Article{	  StarkOman_et_al1999,
  author	= {Stark, George E and Oman, Paul and Skillicorn, Alan and
		  Ameele, Alan},
  title		= {An examination of the effects of requirements changes on
		  software maintenance releases},
  journal	= {Journal of Software Maintenance},
  year		= {1999},
  volume	= {11},
  number	= {5},
  pages		= {293--309},
  publisher	= {Wiley}
}

@Article{	  TammSeddon_et_al2015,
  title		= {How an Australian Retailer Enabled Business Transformation
		  Through Enterprise Architecture.},
  author	= {Tamm, Toomas and Seddon, Peter B and Shanks, Graeme and
		  Reynolds, Peter and Frampton, Keith M},
  journal	= {MIS Quarterly Executive},
  volume	= {14},
  number	= {4},
  year		= {2015},
  publisher	= {Indiana University Press}
}

@InProceedings{	  Teixeira2017,
  title		= {Release early, release often and release on time. An
		  empirical case study of release management},
  author	= {Jose Teixeira},
  booktitle	= {Proceedings of the IFIP WG 2.13 13th International
		  Conference on Open Source Systems (OSS 2017)},
  publisher	= {Springer},
  series	= {IFIP Advances in Information and Communication
		  Technology},
  year		= {2017},
  pages		= {167--181},
  abstract	= {The dictum of ``Release early, release often.'' by Eric
		  Raymond as the Linux modus operandi highlights the
		  importance of release management in open source software
		  development. Nevertheless, there are very few empirical
		  studies addressing release management in open source
		  software development. It is already known that most open
		  source software communities adopt either feature-based or
		  time-based release strategies. Each of these has its
		  advantages and disadvantages that are context-specific.
		  Recent research reported that many prominent open source
		  software projects have moved from feature-based to
		  time-based releases. In this longitudinal case study, we
		  narrate how OpenStack shifted towards a liberal six-month
		  release cycle. If prior research discussed why projects
		  should adopt time-based releases and how they can adopt
		  such a strategy, we discuss how OpenStack adapted its
		  software development processes, its organizational design
		  and its tools toward a hybrid release management strategy
		  --- a strive for balancing the benefits and drawbacks of
		  feature-based and time-based release strategies.},
  isbn		= {978-3-319-57735-7}
}

@Article{	  VitharanaKing_et_al2010,
  author	= { Padmal Vitharana and Julie King and Helena Shih Chapman
		  },
  title		= {Impact of Internal Open Source Development on Reuse:
		  Participatory Reuse in Action},
  journal	= {Journal of Management Information Systems},
  volume	= {27},
  number	= {2},
  pages		= {277-304},
  year		= {2010},
  publisher	= {Routledge},
  doi		= {10.2753/MIS0742-1222270209},
  eprint	= { https://doi.org/10.2753/MIS0742-1222270209
		  
		  },
  abstract	= { Adoption of open source software (OSS) principles to
		  internal software development has gained considerable
		  momentum. Often labeled as "internal open source" (IOS),
		  several large firms have started to implement these
		  programs. Research to date has mostly focused on
		  facilitating IOS adoption. In the present research, we
		  focus on how IOS affects reuse. Employing a qualitative
		  case study, we examine the IOS program at IBM called
		  "Community Source." Analyzing data gathered from multiple
		  sources reveals that IOS adoption facilitates participatory
		  reuse by enhancing information sharing and leveraging of
		  broader community skills. Participatory reuse manifests
		  itself when potential reusers participate in the entire
		  development process leading to the creation of reusable
		  assets. Based on data, we develop a theoretical model to
		  illustrate how IOS affects reuse. While furthering research
		  on IOS and reuse, the model informs managers wishing to
		  foster participatory reuse that they are wise to adopt IOS
		  as a vehicle to promote greater openness of the software
		  development infrastructure for leveraging broader community
		  skills and enhancing information sharing among projects'
		  stakeholders. }
}

@Article{	  Walker1970,
  title		= {Maintaining Your Quality management System-What are the
		  Benefits?},
  author	= {Walker, SD},
  journal	= {WIT Transactions on Information and Communication
		  Technologies},
  volume	= {8},
  year		= {1970},
  publisher	= {WIT Press}
}

@Article{	  WinklerKettunen2018,
  title		= {Five Principles of Industrialized Transformation for
		  Successfully Building an Operational Backbone},
  author	= {Winkler, Till J and Kettunen, Petteri},
  journal	= {MIS Quarterly Executive},
  volume	= {17},
  number	= {2},
  pages		= {123--140},
  year		= {2018},
  publisher	= {Indiana University Press}
}

@PhDThesis{	  Wright2012,
  title		= {Release engineering processes, their faults and failures},
  author	= {Wright, Hyrum Kurt},
  year		= {2012},
  school	= {University of Texas}
}

@InProceedings{	  WrightPerry2009,
  title		= {Subversion 1.5: A case study in open source release
		  mismanagement},
  author	= {Wright, Hyrum K and Perry, Dewayne E},
  booktitle	= {Emerging Trends in Free/Libre/Open Source Software
		  Research and Development, 2009. FLOSS'09. ICSE Workshop
		  on},
  pages		= {13--18},
  year		= {2009},
  organization	= {IEEE}
}

@InProceedings{	  WrightPerry2012,
  author	= {Wright, Hyrum K. and Perry, Dewayne E.},
  title		= {Release Engineering Practices and Pitfalls},
  booktitle	= {Proceedings of the 34th International Conference on
		  Software Engineering},
  series	= {ICSE '12},
  year		= {2012},
  isbn		= {978-1-4673-1067-3},
  location	= {Zurich, Switzerland},
  address	= {New York, USA},
  pages		= {1281--1284},
  numpages	= {4},
  url		= {http://dl.acm.org/citation.cfm?id=2337223.2337395},
  publisher	= {IEEE Press},
  doi		= {10.1109/ICSE.2012.6227099},
  issn		= {0270-5257},
  month		= {June}
}

@Article{	  XuBrinkkemper2007,
  author	= {Lai Xu and Sjaak Brinkkemper},
  title		= {Concepts of product software},
  journal	= {European Journal of Information Systems},
  volume	= {16},
  number	= {5},
  pages		= {531-541},
  year		= {2007},
  publisher	= {Taylor & Francis},
  doi		= {10.1057/palgrave.ejis.3000703},
  eprint	= { https://doi.org/10.1057/palgrave.ejis.3000703
		  
		  },
  abstract	= { AbstractBoth the impact of software on life and our
		  dependence on software is rapidly increasing. Using product
		  software is an everyday phenomenon and product software is
		  a major worldwide industry. Yet, there are very few
		  scientific studies reported on the engineering of product
		  software specifically. In this paper, we discuss specifics
		  of the software business, the various terms used for
		  product software and provide our definition of product
		  software. Moreover, we explain difference between product
		  software and tailor-made software from a software
		  development perspective and provide a new framework for the
		  categorization of product software. This paper points out
		  the urgent need for more research on product software and
		  the directions. }
}
