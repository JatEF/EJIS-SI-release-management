@Book{		  Bays1999,
  author	= {Bays, Michael E.},
  title		= {Software Release Methodology},
  year		= {1999},
  isbn		= {0136365647},
  publisher	= {Prentice-Hall, Inc.},
  address	= {Upper Saddle River, NJ, USA}
}

@Article{	  DubePare2003,
  issn		= {02767783},
  url		= {http://www.jstor.org/stable/30036550},
  abstract	= {Case research has commanded respect in the information
		  systems (IS) discipline for at least a decade.
		  Notwithstanding the relevance and potential value of case
		  studies, this methodological approach was once considered
		  to be one of the least systematic. Toward the end of the
		  1980s, the issue of whether IS case research was rigorously
		  conducted was first raised. Researchers from our field
		  (e.g., Benbasat et al. 1987; Lee 1989) and from other
		  disciplines (e.g., Eisenhardt 1989; Yin 1994) called for
		  more rigor in case research and, through their
		  recommendations, contributed to the advancement of the case
		  study methodology. Considering these contributions, the
		  present study seeks to determine the extent to which the
		  field of IS has advanced in its operational use of case
		  study method. Precisely, it investigates the level of
		  methodological rigor in positivist IS case research
		  conducted over the past decade. To fulfill this objective,
		  we identified and coded 183 case articles from seven major
		  IS journals. Evaluation attributes or criteria considered
		  in the present review focus on three main areas, namely,
		  design issues, data collection, and data analysis. While
		  the level of methodological rigor has experienced modest
		  progress with respect to some specific attributes, the
		  overall assessed rigor is somewhat equivocal and there are
		  still significant areas for improvement. One of the keys is
		  to include better documentation particularly regarding
		  issues related to the data collection and analysis
		  processes.},
  author	= {Line Dubé and Guy Paré},
  journal	= {MIS Quarterly},
  number	= {4},
  pages		= {597--636},
  publisher	= {Management Information Systems Research Center, University
		  of Minnesota},
  title		= {Rigor in Information Systems Positivist Case Research:
		  Current Practices, Trends, and Recommendations},
  volume	= {27},
  year		= {2003}
}

@Article{	  KhomhAdams_et_al2015,
  author	= {Khomh, Foutse and Adams, Bram and Dhaliwal, Tejinder and
		  Zou, Ying},
  title		= {Understanding the impact of rapid releases on software
		  quality},
  journal	= {Empirical Software Engineering},
  year		= {2015},
  month		= {Apr},
  day		= {01},
  volume	= {20},
  number	= {2},
  pages		= {336--373},
  abstract	= {Many software companies are shifting from the traditional
		  multi-month release cycle to shorter release cycles. For
		  example, Google Chrome and Mozilla Firefox release new
		  versions every 6 weeks. These shorter release cycles reduce
		  the users' waiting time for a new release and offer better
		  feedback and marketing opportunities to companies, but it
		  is unclear if the quality of the software product improves
		  as well, since developers and testers are under more
		  pressure. In this paper, we extend our previous empirical
		  study of Mozilla Firefox on the impact of rapid releases on
		  quality assurance with feedback by Mozilla project members.
		  The study compares crash rates, median uptime, and the
		  proportion of pre- and post-release bugs in traditional
		  releases with those in rapid releases, and we also analyze
		  the source code changes made by developers to identify
		  potential changes in the development process. We found that
		  (1) with shorter release cycles, users do not experience
		  significantly more pre- or post-release bugs
		  (percentage-wise) and (2) bugs are fixed faster, yet (3)
		  users experience these bugs earlier during software
		  execution (the program crashes earlier). Increased
		  integration activity and propagation of harder bugs to
		  later versions account for some of these findings. Overall,
		  our case study suggests that a clear release engineering
		  process with thorough automation is one of the major
		  challenges when switching to rapid releases.},
  issn		= {1573-7616},
  doi		= {10.1007/s10664-014-9308-x},
  url		= {https://doi.org/10.1007/s10664-014-9308-x}
}

@Article{	  ReinartzKrafft_et_al2004,
  title		= {The customer relationship management process: Its
		  measurement and impact on performance},
  author	= {Reinartz, Werner and Krafft, Manfred and Hoyer, Wayne D},
  journal	= {Journal of marketing research},
  volume	= {41},
  number	= {3},
  pages		= {293--305},
  year		= {2004},
  publisher	= {American Marketing Association}
}



@InProceedings{	  KakolaKoivulahtiOjala2009,
  author	= {Käkölä, Timo and Koivulahti-Ojala,},
  booktitle	= {2009 42nd Hawaii International Conference on System
		  Sciences},
  title		= {An Information Systems Design Theory for Integrated
		  Requirements and Release Management Systems},
  year		= {2009},
  volume	= {},
  number	= {},
  pages		= {1-10},
  doi		= {10.1109/HICSS.2009.66},
  issn		= {1530-1605},
  month		= {Jan}
}

@Article{	  KakolaKoivulahtiOjala_et_al2010,
  author	= {Käkölä, Timo and Koivulahti-Ojala, Mervi and
		  Liimatainen, Jani},
  title		= {An information systems design product theory for the class
		  of integrated requirements and release management systems},
  journal	= {Journal of Software Maintenance and Evolution: Research
		  and Practice},
  volume	= {23},
  year		= {2010},
  number	= {6},
  pages		= {443-463},
  doi		= {10.1002/smr.492},
  eprint	= {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.492},
  abstract	= {Abstract High-tech companies conducting product
		  development need to collect and analyze requirements
		  effectively, plan and implement releases, and allocate
		  requirements to appropriate releases. Requirements and
		  release management are complicated because development
		  activities typically are scattered across multiple sites,
		  involve multiple partners in different countries, leverage
		  various development methods and tools, and are realized
		  through various organizational arrangements such as release
		  projects in organizations structured around products and
		  permanent release teams in organizations responsible for
		  the long-term development and maintenance of strategic
		  software and hardware assets. Flexible, scalable, and
		  secure groupware-based support for the activities provides
		  substantial payoffs. Yet, the extant literature provides
		  little theoretical guidance for designing and using
		  requirements and release management systems (RRMS) in
		  multi-site, multi-partner environments. This article
		  develops the meta-requirements and a meta-design of an
		  Information Systems Design Product Theory for the class of
		  RRMS based on a case study in a global company and a
		  literature review. The theory is scalable to meet the needs
		  of global companies but simple enough so that small and
		  medium-sized companies can also leverage it to implement
		  requirements and release management solutions. Copyright ©
		  2010 John Wiley \& Sons, Ltd.}
}
